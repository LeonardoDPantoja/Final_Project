# -*- coding: utf-8 -*-
"""Proyecto_Final_Altair.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qpJxNolSOdkvgAVFN4cPAkU-767w80-Z
"""

#Instalar libreria Altair.
!pip install altair vega_datasets

#Importando librerias necesarias para proyecto.
import altair as alt
from vega_datasets import data
import pandas as pd
import numpy as np
alt.renderers.enable('mimetype')
alt.renderers.enable('colab')

#Leer base de datos a utilizar.
data_venta=pd.read_csv('Datos_Ventas_TIendas.csv', encoding='latin-1')

#Vizualización de la base de datos y sus primeros 5 reglones de datos.
data_venta.head(5)

# Pedir tipo de dato de cada variable de la base de datos.
data_venta.info()

#Creación de una grafica con marcador de promedio anual de variable con Altair.
Ventas=alt.Chart(data_venta).mark_bar().encode(
    x='Tienda',
    y='suma'
).interactive()

linea = alt.Chart(data_venta).mark_rule(color='red').encode(
    y='mean(suma)'
)

(Ventas + linea).properties(width=600)

#Creación de un histograma del mes de diciembre con Altair.
tienda=alt.Chart(data_venta).mark_bar().encode(
    x='Tienda',
    y='dic-22'
).interactive()

tienda

#Creación de diagrama de disperción con Altair.
venta_dis=alt.Chart(data_venta).mark_circle().encode(
    x='Tienda',
    y='dic-22'
).interactive()

venta_dis

#Leer base de datos #2 a utilizar.
data_gasto=pd.read_csv('Datos_Gastos_Tiendas.csv', encoding='latin-1')
data_gasto

#Creación de una grafica con marcador de promedio anual de variable con Altair.
Gasto=alt.Chart(data_gasto).mark_bar().encode(
    x='Tienda',
    y='suma'
).interactive()

linea = alt.Chart(data_gasto).mark_rule(color='red').encode(
    y='mean(suma)'
)

(Gasto + linea).properties(width=600)

#Creación de un histograma con marcador de promedio anual con Altair.
ganancia=alt.Chart(data_venta).mark_bar().encode(
    x='Tienda',
    y='ganancia'
).interactive()

linea = alt.Chart(data_venta).mark_rule(color='red').encode(
    y='mean(ganancia)'
)

(ganancia + linea).properties(width=600)

#Creación de un histograma con Altair.
ganancia_=alt.Chart(data_venta).mark_circle().encode(
    x='Tienda',
    y='ganancia'
).interactive()

ganancia_

#Creación de dataframe con los datso necesarios de diferentes base de datos.
conjunto=pd.DataFrame({
    'Tienda':(data_venta['Tienda']),
    'Tipo':(data_venta['Tipo']),
    'Ventas':(data_venta['suma']),
    'Ganancia':(data_venta['ganancia']),
    'Gasto_Telecom':(data_gasto['suma'])
})

conjunto

#visualización y creación de grafica de los diferentes tipos de tiendas.
tipos = alt.Chart(conjunto).mark_bar().encode(
    x=alt.X('count(Tienda):Q',stack='zero'),
    y=alt.Y('Tipo:N'),
    color=alt.Color('Tipo')
)

tipos

#Conteo de todas las tiendas.
tiendas=conjunto['Tienda'].count()
tiendas

#Conteo de los tipos de tiendas.
categoria=conjunto['Tipo'].nunique()
categoria

#creación de grafica apilada de la cantidad de tiendas por tipo de ellas.
grafica=pd.DataFrame({
    'Tipo':['Matriz','Receptora','Redudancia'],
    'Tiendas':[1712,1712,1712],
    'Cantidad_Tienda':[926,611,187]
})

tipo_=alt.Chart(grafica).mark_bar(dx=-15, dy=3, color='white').encode(
    x=alt.X('sum(Cantidad_Tienda):Q'),
    y=alt.Y('Tiendas:N'),
    color='Tipo:N'
)

tipo_

#Elaboración de grafica de área con libraria altair.
venta_tipo=alt.Chart(conjunto).mark_area(opacity=0.6).encode(
    x="Tienda:T",
    y=alt.Y("Ganancia:Q",stack=None),
    color="Tipo:N"
).interactive()

venta_tipo

#Leer base de datos #3 a utilizar.
data_local=pd.read_csv('Datos_Localidad.csv', encoding='latin-1')
data_local

#Creación de un histograma con Altair.
clima=alt.Chart(data_local).mark_bar().encode(
    x='Localidad',
    y='clima_promxlocal'
).interactive()

linea = alt.Chart(data_local).mark_rule(color='red').encode(
    y='mean(clima_promxlocal)'
)

(clima + linea).properties(width=600)

#Creación de un histograma con Altair.
pobla_t=alt.Chart(data_local).mark_bar().encode(
    x='Localidad',
    y='pobla_total'
).interactive()

linea = alt.Chart(data_local).mark_rule(color='red').encode(
    y='mean(pobla_total)'
)

(pobla_t + linea).properties(width=600)

#Suma de la variable.
mujeres=data_local['cant_mujeres'].sum()
mujeres

#Suma de la variable.
niñas=data_local['cant_niñas'].sum()
niñas

#obtención de cantidad de la variable.
muj_mayo_edad=mujeres-niñas
muj_mayo_edad

#Suma de la variable.
hombres=data_local['cant_hombres'].sum()
hombres

#Suma de la variable.
niños=data_local['cant_niños'].sum()
niños

#obtención de cantidad de la variable.
hom_mayo_edad=hombres-niños
hom_mayo_edad

#obtención de cantidad de la variable.
menor_edad=niñas+niños
menor_edad

#obtención de cantidad de la variable.
mayor_edad=muj_mayo_edad+hom_mayo_edad
mayor_edad

#obtención de cantidad de la variable.
total=mujeres+hombres
total

#creación de grafica apilada de la cantidad y tipo de población.
grafica=pd.DataFrame({
    'Genero':['mujeres','mujeres','hombres','hombres'],
    'Edad':['menor_edad','mayor_edad','menor_edad','mayor_edad'],
    'Poblacion_Total':[9941647,27117573,10232485,24693752]
})

genero=alt.Chart(grafica).mark_bar().encode(
    x='Poblacion_Total',
    y='Edad',
    color='Genero'
)

genero

#creación de grafica de pastel con la cantidad y tipo de población.
date = pd.DataFrame(
    {"Genero": ['Mujeres','Hombres'],
     "Poblacion": [37059220,34926237]}
)


dona=alt.Chart(date).mark_arc(innerRadius=50).encode(
    theta="Poblacion",
    color="Genero:N",
)

dona

#Leer base de datos #4 a utilizar.
data_estado=pd.read_csv('Datos_Estados.csv', encoding='latin-1')
data_estado

#creación de grafica apilada de la cantidad y los partidos politicos.
partido = pd.DataFrame(
    {"Partido_politico": ['Morena','PRI','PAN','Movimiento_Ciudadano','Partido_Verde'],
     'N_Estados':[32,32,32,32,32],
     "Cantidad_Estados": [21,3,5,2,1]}
)

tipo_=alt.Chart(partido).mark_bar(dx=-15, dy=3, color='white').encode(
    x=alt.X('sum(Cantidad_Estados):Q'),
    y=alt.Y('N_Estados:N'),
    color='Partido_politico:N'
)

tipo_

#creación de grafica de pastel con la cantidad y prtido politicos.
partido = pd.DataFrame(
    {"Partido_politico": ['Morena','PRI','PAN','Movimiento_Ciudadano','Partido_Verde'],
     "N_Estados": [21,3,5,2,1]}
)


dona_p=alt.Chart(partido).mark_arc(innerRadius=50).encode(
    theta="N_Estados",
    color="Partido_politico:N",
)

dona_p

#creación de grafica apilada de la cantidad y tipo de situación.
grafica=pd.DataFrame({
    'Situacion':['Nacimiento','Nacimiento','Nacimiento','Nacimiento','Nacimiento','Nacimiento','Nacimiento','Nacimiento','Nacimiento','Nacimiento','Nacimiento','Nacimiento','Nacimiento','Nacimiento','Nacimiento','Nacimiento','Nacimiento','Nacimiento','Nacimiento','Nacimiento','Nacimiento','Nacimiento','Nacimiento','Nacimiento','Nacimiento','Nacimiento','Nacimiento','Nacimiento','Nacimiento','Nacimiento','Nacimiento','Nacimiento','Defuncion','Defuncion','Defuncion','Defuncion','Defuncion','Defuncion','Defuncion','Defuncion','Defuncion','Defuncion','Defuncion','Defuncion','Defuncion','Defuncion','Defuncion','Defuncion','Defuncion','Defuncion','Defuncion','Defuncion','Defuncion','Defuncion','Defuncion','Defuncion','Defuncion','Defuncion','Defuncion','Defuncion','Defuncion','Defuncion','Defuncion','Defuncion'],
    'Estado_Rep':['Aguascalientes','Baja_California_Norte','Baja_Callifornia_Sur','Campeche','Chiapas','Chihuahua','Coahuila','Colima','Distrito_Federal','Durango','Estado_Mexico','Guanajuato','Guerrero','Hidalgo','Jalisco','Michoacan','Morelos','Nayarit','Nuevo_Leon','Oaxaca','Puebla','Queretaro','Quintana_Roo','San_Potosi','Sinaloa','Sonora','Tabasco','Tamaulipas','Tlaxcala','Veracruz','Yucatan','Zacatecas','Aguascalientes','Baja_California_Norte','Baja_Callifornia_Sur','Campeche','Chiapas','Chihuahua','Coahuila','Colima','Distrito_Federal','Durango','Estado_Mexico','Guanajuato','Guerrero','Hidalgo','Jalisco','Michoacan','Morelos','Nayarit','Nuevo_Leon','Oaxaca','Puebla','Queretaro','Quintana_Roo','San_Potosi','Sinaloa','Sonora','Tabasco','Tamaulipas','Tlaxcala','Veracruz','Yucatan','Zacatecas'],
    'Cantidad':[20370,47945,10081,10729,45815,8948,98098,48095,65703,27988,85259,59150,37498,119604,184447,73115,24662,16524,74471,52031,104228,33211,24063,41812,38971,30904,28943,44297,20610,92325,29321,26309,9548,32662,4867,7549,28190,6057,38908,39246,107292,13945,51677,25859,22655,64461,152668,36614,18442,8708,42418,33072,56745,15114,11003,24427,23962,27814,21871,28025,12033,74758,18221,14519]
})



nac_def=alt.Chart(grafica).mark_bar().encode(
    x='sum(Cantidad):Q',
    y='Estado_Rep:N',
    color='Situacion:N'
).interactive()

nac_def

# Pedir tipo de dato de cada variable de la base de datos.
data_estado.info()

#creación de  gráfica de área de la cantidad de viviendas habitadas por estados.
viviendas=alt.Chart(data_estado).mark_area(
    line={'color':'darkgreen'},
    color=alt.Gradient(
        gradient='linear',
        stops=[alt.GradientStop(color='white', offset=0),
               alt.GradientStop(color='darkgreen', offset=1)],
        x1=1,
        x2=1,
        y1=1,
        y2=0
    )
).encode(
    alt.X('estado:Q'),
    alt.Y('viv_part_habit:Q')
).interactive()

viviendas

#creación de  gráfica de linea de la cantidad de viviendas habitadas por estados.
viv=alt.Chart(data_estado).mark_area(
    color="lightblue",
    interpolate='step-after',
    line=True
).encode(
    x='estado:T',
    y='viv_part_habit:Q'
).interactive()

viv

"""##Referencias:

Usos y tipos de graficos con la librería Altair.  
Link:
https://altair-viz.github.io/index.html

Victor Cupisnera (2023) Visualización con Altair.  
En el siguiente Link: https://github.com/vcuspinera/UDG_MCD_Project_Dev_I/blob/main/actividades/12_Viz_Altair.ipynb

Sergio Sánchez (2018) Visualización de Datos con Altair.  
Link: https://medium.com/datos-y-ciencia/visualizaci%C3%B3n-de-datos-con-altair-297b0639448d
"""





















